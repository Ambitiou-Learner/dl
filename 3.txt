import numpy as np
def tanh(x):           # Used in hidden layers
  return (np.exp(x) - np.exp(-x)) / (np.exp(x) + np.exp(-x))
def sigmoid(x):        # Used in output layer
  return 1 / (1 + np.exp(-x))
A0 = [0.6, 0.8, 0.3, 0.7]  # Input layer
weights0 = [               # Input layer to 1st hidden layer
    [0.2,0.5,0.3,0.7],
    [0.4,0.1,0.8,0.2],
    [0.6,0.9,0.5,0.3],
    [0.8,0.2,0.7,0.6],]
weights1 = [               # 1st hidden layer to 2nd hidden layer
    [0.1,0.3,0.6,0.8],
    [0.5,0.2,0.7,0.4],
    [0.9,0.8,0.4,0.5],
    [0.3,0.7,0.2,0.1],]
weights2 = [              # 2nd hidden layer to 3rd hidden layer
    [0.7,0.5,0.4,0.2],
    [0.3,0.8,0.6,0.1],
    [0.9,0.2,0.7,0.3],
    [0.5,0.4,0.1,0.8],]
weights3 = [ 0.6, 0.2, 0.7 , 0.4]              # 3rd hidden layer to output layer
weights = [weights0, weights1, weights2, weights3]
bias = [0.2,0.3,0.1,0.4]
Z1 = np.dot(weights[0], A0) + bias[0]
A1 = tanh(Z1)  # print
Z2 = np.dot(weights[1], A1) + bias[1]
A2 = tanh(Z2)  # print
Z3 = np.dot(weights[2], A2) + bias[2]
A3 = tanh(Z3)  # print
Z4 = np.dot(weights[3], A3) + bias[3]
A4 = sigmoid(Z4)
print(A4)