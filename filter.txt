 # 1. Write Python code to perform a 2D convolution operation using a 3x3 kernel‚ê£
on a small grayscale image represented as a matrix.

[14]: import numpy as np
import cv2
import matplotlib.pyplot as plt
image = cv2.imread('lion.jpg', cv2.IMREAD_GRAY
# Vertical
sobel_x = [
[-1, 0, 1],
[-2, 0, 2],
[-1, 0, 1]
]
# Horizontal
sobel_y = [
[-1, -2, -1],
[ 0, 0, 0],
[ 1, 2, 1]
]
# Laplacian
laplacian_kernel = [
[ 0, 1, 0],
[ 1, -4, 1],
[ 0, 1, 0]
]
# Vertical
prewitt_x = [
[-1, 0, 1],
[-1, 0, 1],
[-1, 0, 1]
]
# Horizontal
prewitt_y = [
[-1, -1, -1],
[ 0, 0, 0],
[ 1, 1, 1]
]
# Sharpen
sharpen_kernel = [
[ 0, -1, 0],
[-1, 5, -1],
[ 0, -1, 0]
]
# gaussian blur
gaussian_blur_kernel = [
[1/16, 2/16, 1/16],
[2/16, 4/16, 2/16],
[1/16, 2/16, 1/16]
]
# box blur
box_blur_kernel = [
[1/9, 1/9, 1/9],
[1/9, 1/9, 1/9],
[1/9, 1/9, 1/9]
]
# identity
identity_kernel = [
[0, 0, 0],
[0, 1, 0],
[0, 0, 0]
]
# emboss
emboss_kernel = [
[-2, -1, 0],
[-1, 1, 1],
[ 0, 1, 2]
]
# replave with kernel you want
kernel = np.array(sobel_x)
convolved_image = cv2.filter2D(image, -1, kernel)
# Plot
plt.figure(figsize=(10, 5))
# Original image
plt.subplot(1, 2, 1)
plt.imshow(image, cmap='gray')
plt.title('Original Image')
plt.axis('off')
# Convolved image
plt.subplot(1, 2, 2)
plt.imshow(convolved_image, cmap='gray')
plt.title('Convolved Image')
plt.axis('off')
plt.show()
